package sync

// Map operations in Goscript are innately atomic

type Map struct {
    data map[interface{}]interface{}
}

// Load returns the value stored in the map for a key, or nil if no
// value is present.
// The ok result indicates whether value was found in the map.
func (m *Map) Load(key interface{}) (value interface{}, ok bool) {
    v, ok := m.getData()[key]
    return v, ok
}

// Store sets the value for a key.
func (m *Map) Store(key, value interface{}) {
    m.getData()[key] = value
}

// LoadOrStore returns the existing value for the key if present.
// Otherwise, it stores and returns the given value.
// The loaded result is true if the value was loaded, false if stored.
func (m *Map) LoadOrStore(key, value interface{}) (actual interface{}, loaded bool) {
    if e, ok := m.getData()[key]; ok {
        return e, true
    }

    var mu Mutex
    mu.Lock()
    defer mu.Unlock()
    if e, ok := m.data[key]; ok {
        return e, true
    } else {
        m.data[key] = value
        return value, false
    }
}

// Delete deletes the value for a key.
func (m *Map) Delete(key interface{}) {
    delete(m.getData(), key)
}

// Range calls f sequentially for each key and value present in the map.
// If f returns false, range stops the iteration.
//
// Range does not necessarily correspond to any consistent snapshot of the Map's
// contents: no key will be visited more than once, but if the value for any key
// is stored or deleted concurrently, Range may reflect any mapping for that key
// from any point during the Range call.
//
// Range may be O(N) with the number of elements in the map even if f returns
// false after a constant number of calls.
func (m *Map) Range(f func(key, value interface{}) bool) {
    panic("not implemented")
}

func (m *Map) getData() map[interface{}]interface{} {
    var l Mutex
    l.Lock()
    defer l.Unlock()
    if m.data == nil {
        m.data = make(map[interface{}]interface{})
    }
    return m.data
}